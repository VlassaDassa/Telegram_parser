from create_google_parser_bot import bot, dp
from aiogram import Dispatcher, types

#FSM
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

#FILTERS
from aiogram.dispatcher.filters import Text

# PATH
from pathlib import Path

# DATABASE
from database.sqlite_db import Database

# Time
import datetime

# Keyboard
from keyboard import client_kb as cl_kb

# Spreadsheet
from google_sheet.create_start_sheet import create_start_sheet
from google_sheet.insert_data import insert_values

# Config
import config as cfg

# Thread
from threading import Thread

# Asyncio
import asyncio

# Excel
from excel.excel_create_doc import create_excel_book, insert_to_excel

# OS
import os

# Parser
from handlers import time_pars

# APScheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler



dir_path = str(Path.cwd())
path_to_db = str(Path(dir_path, 'google_parser.db'))
db = Database(path_to_db)




# Start
async def start(message: types.Message):
    welcome_text = '<b>–ü—Ä–∏–≤–µ—Ç! ‚úã</b>\n' \
                   '–≠—Ç–æ –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä, —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å Wildberries'
    dir_path = str(Path.cwd())
    path_to_logo_wb = str(Path(dir_path, 'assets', 'logo_wildberries.jpg'))
    logo_wb = open(path_to_logo_wb, 'rb')
    await message.answer(welcome_text, parse_mode='HTML', reply_markup=cl_kb.main_menu)
    await bot.send_photo(message.from_user.id, logo_wb)

    # Registration
    cur_date = datetime.datetime.now().strftime('%d-%m-%Y')
    if message.from_user.username is None:
        user_name = message.from_user.full_name
    else:
        user_name = message.from_user.username
    tgid = message.from_user.id
    await db.reg_user(user_name, tgid, cur_date)
    await db.set_status_errors(message.from_user.id)
    await db.set_parsing_status(message.from_user.id)
    await db.set_schedule_status(message.from_user.id)

    if not os.path.exists(str(Path(str(Path.cwd()), 'data', f'{message.from_user.id}.xlsx'))):
        create_excel_book(message.from_user.id)





# Help
async def help(message: types.Message):
    help_message = '<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º?</b>\n' \
                   '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å <a href="https://www.google.ru/intl/ru/sheets/about/">Google —Ç–∞–±–ª–∏—Ü—É</a>\n' \
                   '–ó–∞—Ç–µ–º –≤—ã–¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É'

    bot_gmail = '–ü–æ—á—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:\n `test-336@nimble-petal-354410.iam.gserviceaccount.com`\n' \
                '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É:\n `/set_table __—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É__`'


    img1 = open(str(Path(str(Path.cwd()), 'assets', 'inst_1.JPG')), 'rb')
    img2 = open(str(Path(str(Path.cwd()), 'assets', 'inst_2.JPG')), 'rb')

    await message.answer(help_message, parse_mode='HTML', disable_web_page_preview=True)
    await bot.send_photo(message.from_user.id, img1)
    await bot.send_photo(message.from_user.id, img2)
    await message.answer(bot_gmail, parse_mode='MARKDOWN')



async def set_table(message: types.Message):
    if not await db.check_exist_spreadsheet(message.from_user.id):
        try:
            message.text.split(' ')[1]
        except IndexError:
            await message.answer('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–æ - `/set_table —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É)`', parse_mode='MARKDOWN')
        else:
            link_to_spreadsheet = message.text.split(' ')[1]
            if len(link_to_spreadsheet) > 39:
                if 'https://docs.google.com/spreadsheets/d/' in link_to_spreadsheet[:39]:
                    await db.add_spreadsheet(message.from_user.id, message.text.split(' ')[1])
                    link_to_spreadsheet = await db.get_spreadsheetid(message.from_user.id)
                    spreadsheet_id = link_to_spreadsheet[0].split('/')[5]

                    start_sheet = Thread(target=create_start_sheet, args=(cfg.CREDENTIALS, spreadsheet_id, message.from_user.id))
                    start_sheet.start()
                    collapse_message = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, collapse_message.message_id)
                    if await db.get_status_errors(message.from_user.id):
                        await message.answer('–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ ‚úî', reply_markup=cl_kb.main_menu)
                    else:
                        await message.answer('<b>–û—à–∏–±–∫–∞!</b>\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –≤—ã–¥–∞–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç—É.\n<i>–°–º. "–ü–æ–º–æ—â—å üîé"</i>', parse_mode='HTML', reply_markup=cl_kb.main_menu)
                        await db.delete_spreadsheet(message.from_user.id)
                else:
                    await message.answer('–°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')
            else:
                await message.answer('–°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')
    else:
        await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞', reply_markup=cl_kb.exist_spreadsheet)



async def delete_spreadsheet(message: types.Message):
    await db.delete_spreadsheet(message.from_user.id)
    await message.answer('–¢–∞–±–ª–∏—Ü—É —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úî', reply_markup=cl_kb.main_menu)



async def menu(message: types.Message, state: FSMContext):
    await message.answer('–ú–µ–Ω—é üí§', reply_markup=cl_kb.main_menu)
    await message.delete()
    await state.finish()






class FSMstart_parsing(StatesGroup):
    category = State()
    count_pages = State()
    choice = State()



async def start_parsing(message: types.Message):
    if not bool(await db.get_parsing_status(message.from_user.id)):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=cl_kb.category)
        await FSMstart_parsing.category.set()
    else:
        await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                             '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
                             parse_mode='HTML')

async def choice_category(message: types.Message,  state: FSMContext):
    if message.text in cfg.CATEGORY.keys():
        async with state.proxy() as data:
            data['category'] = message.text
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n<b>–î–∏–∞–ø–∞–∑–æ–Ω 1-100</b>', reply_markup=cl_kb.kb_remove, parse_mode='HTML')
        await FSMstart_parsing.next()
    else:
        await message.answer('–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç', reply_markup=cl_kb.main_menu)
        await state.finish()



async def choice_count_pages(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ', reply_markup=cl_kb.main_menu)
        await state.finish()
    else:
        if int(message.text) in range(1, 101):

            async with state.proxy() as data:
                data['count_pages'] = message.text
            await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≥—Ä—É–∑–∫–∏</b>\n'
                                 'Excel - –±—ã—Å—Ç—Ä–æ, –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ—É–¥–æ–±–Ω–æ\n'
                                 'Google sheet - –æ—á–µ–Ω—å –¥–æ–ª–≥–æ, —É–¥–æ–±–Ω–æ',
                                 reply_markup=cl_kb.method_unload, parse_mode='HTML')
            await FSMstart_parsing.next()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100', reply_markup=cl_kb.main_menu)
            await state.finish()


async def pars_google_sheet(message: types.Message, state: FSMContext):
    if await db.check_exist_spreadsheet(message.from_user.id):
        async with state.proxy() as data:
            link_to_spreadsheet = await db.get_spreadsheetid(message.from_user.id)
            spreadsheet_id = link_to_spreadsheet[0].split('/')[5]
            working_hours = ((int(data['count_pages']) * 30) * 25) / 60
            await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{data["category"]}</b>\n'
                                 f'–° –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{data["count_pages"]}</b>\n'
                                 f'<b>–ù–∞—á–∞–ª—Å—è</b> üöÄ\n\n'
                                 f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{working_hours} –º–∏–Ω—É—Ç</b>\n'
                                 f'<b>–ú–µ—Ç–æ–¥:</b> Google sheet',
                                 parse_mode='HTML', reply_markup=cl_kb.main_menu)
            start_pars = Thread(target=insert_values, args=(cfg.CREDENTIALS, spreadsheet_id, data['count_pages'],
                                                            data['category'], message.from_user.id))
            start_pars.start()
            collapse_sticker = await bot.send_sticker(message.from_user.id,'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')
            await state.finish()
            time_work = (int(data['count_pages']) * 100 * 20)
            for i in range(time_work):
                if start_pars.is_alive():
                    await asyncio.sleep(0.5)
                else:
                    await bot.delete_message(message.from_user.id, collapse_sticker.message_id)
                    await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{data["category"]}</b>\n'
                                         f'–° –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{data["count_pages"]}</b>\n'
                                         f'<b>–û–∫–æ–Ω—á–∏–ª—Å—è</b> üöÄ\n\n'
                                         f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{working_hours} –º–∏–Ω—É—Ç</b>\n'
                                         f'<b>–ú–µ—Ç–æ–¥:</b> Google sheet',
                                         parse_mode='HTML', reply_markup=cl_kb.main_menu)
                    break
    else:
        await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                             '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç Google sheet\n'
                             '—Å–º. "–ü–æ–º–æ—â—å üîé"',
                             reply_markup=cl_kb.main_menu, parse_mode='HTML')
        await state.finish()



async def pars_excel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        working_hours = (int(data['count_pages']) * 30) / 60
        await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{data["category"]}</b>\n'
                             f'–° –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{data["count_pages"]}</b>\n'
                             f'<b>–ù–∞—á–∞–ª—Å—è</b> üöÄ\n\n'
                             f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{working_hours} –º–∏–Ω—É—Ç</b>\n'
                             f'<b>–ú–µ—Ç–æ–¥:</b> Excel',
                             parse_mode='HTML', reply_markup=cl_kb.main_menu)
        start_write_excel = Thread(target=insert_to_excel, args=(data['count_pages'], data['category'], message.from_user.id))
        start_write_excel.start()
        collapse_sticker = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')
        await state.finish()
        time_work = (int(data['count_pages']) * 100)
        for i in range(time_work):
            print(start_write_excel.is_alive())
            if start_write_excel.is_alive():
                await asyncio.sleep(0.5)
            else:
                await state.finish()
                await bot.delete_message(message.from_user.id, collapse_sticker.message_id)
                await message.answer(f'–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{data["category"]}</b>\n'
                                     f'–° –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{data["count_pages"]}</b>\n'
                                     f'<b>–û–∫–æ–Ω—á–∏–ª—Å—è</b> üöÄ\n\n'
                                     f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <b>{working_hours} –º–∏–Ω—É—Ç</b>\n'
                                     f'<b>–ú–µ—Ç–æ–¥:</b> Excel',
                                     parse_mode='HTML', reply_markup=cl_kb.main_menu)
                await message.answer_document(open(str(Path(str(Path.cwd()), 'data', f'{message.from_user.id}.xlsx')), "rb"))
                break



async def schedule_parsing(message: types.Message):
    inst = '<b>–ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n' \
           '<b>1. </b><i>–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã</i> - –≤–ø–æ–ª–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –≤—ã –∏—â–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n' \
           '<b>2. </b><i>–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥</i> - –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥' \
           ' –∫ –ø—Ä–∏–º–µ—Ä—É, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –∑–∞–¥–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –≤–∞–º –≤–µ—â—å,' \
           ' –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ò–ª–∏ –∂–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'
    await message.answer(inst, reply_markup=cl_kb.time_parsing, parse_mode='HTML')



class FSMfind_min_price(StatesGroup):
    product_name = State()

async def start_find_min_price(message: types.Message):
    if not bool(await db.get_parsing_status(message.from_user.id)):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞:', reply_markup=cl_kb.kb_remove)
        await FSMfind_min_price.product_name.set()
    else:
        await message.answer('<b>–û—à–∏–±–∫–∞</b>\n'
                             '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
                             parse_mode='HTML')


async def next_find_min_price(message: types.Message, state: FSMContext):
    product_name = message.text
    start_finding = Thread(target=time_pars.find_min_price, args=(product_name, message.from_user.id))
    start_finding.start()
    await state.finish()
    collapse_sticker = await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIHvGLD7IfmXUxoiO9RnLPhOSSZy1f2AAIjAAMoD2oUJ1El54wgpAYpBA')
    for i in range(1000):
        if start_finding.is_alive():
            await asyncio.sleep(0.5)
        else:
            await bot.delete_message(message.from_user.id, collapse_sticker.message_id)
            min_price = await time_pars.return_min_price()
            if min_price[0]:
                mes_text = f'<b>–¢–æ–≤–∞—Ä:</b> "{product_name}"\n' \
                           f'<b>–¶–µ–Ω–∞:</b> {min_price[1]} ‚ÇΩ\n' \
                           f'<a href="{min_price[2]}">–ö–õ–ò–ö!</a>'
                await message.answer(mes_text, reply_markup=cl_kb.main_menu, parse_mode='HTML')
                await time_pars.clear_min_price()
            else:
                await message.answer('<b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞</b>\n'
                                     '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–±—Ä–∞–Ω–æ –≤–µ—Ä–Ω–æ\n'
                                     '–í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ',
                                     reply_markup=cl_kb.main_menu, parse_mode='HTML')
            break



async def time_parsing(message: types.Message):
    mes_text = '<b>"–í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è"</b>\n' \
               '–î–ª—è —ç—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å:\n<i>1. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n2. –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n3. –í—Ä–µ–º—è</i>\n' \
               '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏ –µ—Å–ª–∏ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' \
               ' –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö\n\n' \
               '<b>"–ò–Ω—Ç–µ—Ä–≤–∞–ª"</b>\n' \
               '–î–ª—è —ç—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å:\n' \
               '<i>1. –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)\n' \
               '2. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' \
               '3. –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</i>\n' \
               '–ö–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–¥–ø–∞–¥–∞—é—â–∏—Ö –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è' \
               '–≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    await message.answer(mes_text, parse_mode='HTML', reply_markup=cl_kb.find_time_range)






class FSMcertain_time_pars(StatesGroup):
    product_name = State()
    price = State()
    time = State()

async def certain_time_pars(message: types.Message):
    status = await db.get_schedule_status(message.from_user.id)
    if status[0] == 'inactive':
        if not bool(await db.get_parsing_status(message.from_user.id)):
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', reply_markup=cl_kb.kb_remove)
            await FSMcertain_time_pars.product_name.set()
        else:
            await message.answer('–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∫–æ–Ω—á–∞–Ω–∏—è')

async def cert_time_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product_name'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n'
                         '<i>–ü—Ä–∏–º–µ—Ä: 100-150</i>',
                         reply_markup=cl_kb.kb_remove, parse_mode='HTML')
    await FSMcertain_time_pars.next()

async def cert_time_time(message: types.Message, state: FSMContext):
    if '-' not in message.text:
        await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
        await state.finish()
    else:
        try:
            int(message.text.split('-')[0])
            int(message.text.split('-')[1])
        except ValueError:
            await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
            await state.finish()
        else:
            if len(message.text.split('-')) > 2:
                await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
                await state.finish()
            else:
                if int(message.text.split('-')[0]) > int(message.text.split('-')[1]):
                    await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
                    await state.finish()
                else:
                    async with state.proxy() as data:
                        data['price'] = message.text
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:\n'
                                         '<i>–ü—Ä–∏–º–µ—Ä: 21:00</i>',
                                         reply_markup=cl_kb.kb_remove, parse_mode='HTML')
                    await FSMcertain_time_pars.next()



async def start_schedule_time_parsing(prod_name, price, tgid):
    await db.update_schedule_status(tgid, 'active')
    await time_pars.clear_links_time_pars()
    start_pars = Thread(target=time_pars.find_user_opt_time, args=(prod_name, price, tgid))
    start_pars.start()
    for i in range(1000):
        if start_pars.is_alive():
            await asyncio.sleep(0.5)
        else:
            links = await time_pars.return_links_time_pars()
            if links[0]:
                await bot.send_message(tgid, '<b>–í—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –≤–æ—Ç –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>', parse_mode='HTML')
                for link in links:
                    await bot.send_message(tgid, f'–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä: <b><a href="{link}">—Å—Å—ã–ª–∫–∞</a></b>\n',
                                           parse_mode='HTML', reply_markup=cl_kb.main_menu)
            else:
                await bot.send_message(tgid, '<b>–í—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –≤–æ—Ç –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n'
                                             '–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                                       reply_markup=cl_kb.main_menu, parse_mode='HTML')
            break


async def cert_time_pars_finish(message: types.Message, state: FSMContext):
    if ':' not in message.text:
        await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è', reply_markup=cl_kb.main_menu)
        await state.finish()
    else:
        try:
            int(message.text.split(':')[0])
            int(message.text.split(':')[1])
        except ValueError:
            await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è', reply_markup=cl_kb.main_menu)
            await state.finish()
        else:
            if len(message.text.split(':')) > 2:
                await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è', reply_markup=cl_kb.main_menu)
                await state.finish()
            else:
                if (len(message.text.split(':')[0]) < 2 or len(message.text.split(':')[0]) > 2) or (len(message.text.split(':')[0]) < 2 or len(message.text.split(':')[1]) > 2):
                    await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è', reply_markup=cl_kb.main_menu)
                    await state.finish()
                else:
                    if ((int(message.text.split(':')[0]) > 23) or (int(message.text.split(':')[1]) > 59)) or ((int(message.text.split(':')[0]) < 0) or (int(message.text.split(':')[1]) < 0)):
                        await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è', reply_markup=cl_kb.main_menu)
                        await state.finish()
                    else:

                        async with state.proxy() as data:
                            data['time'] = message.text
                        hour = data['time'].split(':')
                        scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
                        scheduler.add_job(start_schedule_time_parsing, args=(data['product_name'], data['price'], message.from_user.id),
                                          trigger='cron', hour=int(hour[0]), minute=int(hour[1]))
                        scheduler.start()



                        await message.answer('<b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è</b>\n'
                                             '–ú—ã –≤–∞–º —Å–æ–æ–±—â–∏–º –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç—Å—è –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä',
                                             reply_markup=cl_kb.main_menu, parse_mode='HTML')

                        await state.finish()





class FSMinterval_time_pars(StatesGroup):
    product_name = State()
    price = State()
    interval = State()


async def interval_time_pars(message: types.Message):
    status = await db.get_schedule_status(message.from_user.id)
    if status[0] == 'inactive':
        if not bool(await db.get_parsing_status(message.from_user.id)):
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', reply_markup=cl_kb.kb_remove)
            await FSMinterval_time_pars.product_name.set()
        else:
            await message.answer('–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ')


async def interval_time_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product_name'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n'
                         '<i>–ü—Ä–∏–º–µ—Ä: 100-150</i>',
                         reply_markup=cl_kb.kb_remove, parse_mode='HTML')
    await FSMinterval_time_pars.next()


async def interval_time_parsing(message: types.Message, state: FSMContext):
    if '-' not in message.text:
        await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
        await state.finish()
    else:
        try:
            int(message.text.split('-')[0])
            int(message.text.split('-')[1])
        except ValueError:
            await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
            await state.finish()
        else:
            if len(message.text.split('-')) > 2:
                await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
                await state.finish()
            else:
                if int(message.text.split('-')[0]) > int(message.text.split('-')[1]):
                    await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É', reply_markup=cl_kb.main_menu)
                    await state.finish()
                else:
                    async with state.proxy() as data:
                        data['price'] = message.text
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:\n'
                                         '<i>–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</i>'
                                         '–ü—Ä–∏–º–µ—Ä: <i>5</i>',
                                         reply_markup=cl_kb.kb_remove, parse_mode='HTML')
                    await FSMinterval_time_pars.next()



async def interval_pars_finish(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    else:
        if len(message.text) > 2:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        else:
            if (int(message.text) > 60) or (int(message.text) <= 0):
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö')
            else:
                async with state.proxy() as data:
                    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
                    scheduler.add_job(start_schedule_time_parsing,
                                      args=(data['product_name'], data['price'], message.from_user.id),
                                      trigger='interval', minutes=int(message.text))
                    scheduler.start()
                    await message.answer('<b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è</b>\n'
                                         '–ú—ã –≤–∞–º —Å–æ–æ–±—â–∏–º –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç—Å—è –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä',
                                         reply_markup=cl_kb.main_menu, parse_mode='HTML')
                await state.finish()



async def cancel_schedule_parsing(message: types.Message):
    status = await db.get_schedule_status(message.from_user.id)
    if status[0] == 'active':
        await db.update_schedule_status(message.from_user.id, 'inactive')
        await message.answer('–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞')










#REGISTRATION
def register_handlers_clients(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'], chat_type='private')
    dp.register_message_handler(help, Text(equals='–ü–æ–º–æ—â—å üîé'), chat_type='private')
    dp.register_message_handler(set_table, Text(contains='/set_table'), chat_type='private')
    dp.register_message_handler(menu, Text(equals='–ú–µ–Ω—é üí§'), chat_type='private', state='*')
    dp.register_message_handler(delete_spreadsheet, Text(equals='–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚ùå'), chat_type='private')

    # Start parsing
    dp.register_message_handler(start_parsing, Text(equals='–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ üöÄ'), chat_type='private', state=None)
    dp.register_message_handler(choice_category, state=FSMstart_parsing.category)
    dp.register_message_handler(choice_count_pages, state=FSMstart_parsing.count_pages)

    # Parsing to Google sheet
    dp.register_message_handler(pars_google_sheet, Text(equals='Google sheet'), chat_type='private', state=FSMstart_parsing.choice)
    dp.register_message_handler(pars_excel, Text(equals='Excel'), chat_type='private', state=FSMstart_parsing.choice)

    # Schedule pars
    dp.register_message_handler(schedule_parsing, Text(equals='–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ üïõ'), chat_type='private')

    # Finding minimum price
    dp.register_message_handler(start_find_min_price, Text(equals='–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã'), chat_type='private', state=None)
    dp.register_message_handler(next_find_min_price, chat_type='private', state=FSMfind_min_price.product_name)

    # Time parsing
    dp.register_message_handler(time_parsing, Text(equals='–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥'), chat_type='private')
    dp.register_message_handler(certain_time_pars, Text(equals='–í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è'), chat_type='private', state=None)
    dp.register_message_handler(cert_time_price, chat_type='private', state=FSMcertain_time_pars.product_name)
    dp.register_message_handler(cert_time_time, chat_type='private', state=FSMcertain_time_pars.price)
    dp.register_message_handler(cert_time_pars_finish, chat_type='private', state=FSMcertain_time_pars.time)

    # Interval parsing
    dp.register_message_handler(interval_time_pars, Text(equals='–ò–Ω—Ç–µ—Ä–≤–∞–ª'), chat_type='private', state=None)
    dp.register_message_handler(interval_time_price, chat_type='private', state=FSMinterval_time_pars.product_name)
    dp.register_message_handler(interval_time_parsing, chat_type='private', state=FSMinterval_time_pars.price)
    dp.register_message_handler(interval_pars_finish, chat_type='private', state=FSMinterval_time_pars.interval)
    dp.register_message_handler(cancel_schedule_parsing, Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'), chat_type='private')


